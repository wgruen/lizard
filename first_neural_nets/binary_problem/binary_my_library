{"cells":[{"cell_type":"markdown","metadata":{"id":"r6vgge28bsTY"},"source":["# run locial problems with the libray I wrote"]},{"cell_type":"code","execution_count":1,"metadata":{"id":"7uKG3cHUjFI4","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1639945282931,"user_tz":300,"elapsed":24640,"user":{"displayName":"Wolfgang Gruen","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01742609913198784862"}},"outputId":"1ac60bad-6c7d-4f15-bff4-6cf06730c097"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","drive  sample_data\n","/content\n","physical devises\n","[]\n","tensorflow version\n","2.7.0\n","keras version\n","2.7.0\n"]}],"source":["from google.colab import drive\n","import tensorflow as tf\n","import keras\n","\n","drive.mount('/content/drive')\n","!ls\n","!pwd\n","\n","physical_devices = tf.config.list_physical_devices('GPU')\n","print(\"physical devises\")\n","print(physical_devices)\n","\n","print(\"tensorflow version\")\n","print(tf.__version__)\n","print(\"keras version\")\n","print(keras.__version__)"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PmnklYq65Cx6","outputId":"23af1b28-8048-4ac7-8b4f-4bba2891e5bc","executionInfo":{"status":"ok","timestamp":1639945614523,"user_tz":300,"elapsed":54309,"user":{"displayName":"Wolfgang Gruen","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"01742609913198784862"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/colab_wolfs_git_clones/lizard\n","first_neural_nets  nmf\tpicture_problem  README.md  statistical_analysis\n","/content/drive/MyDrive/colab_wolfs_git_clones/lizard\n","/content/drive/MyDrive/colab_wolfs_git_clones/lizard/first_neural_nets/binary_problem\n","binary_my_library\t       logical_or.data.train.cvs       __pycache__\n","binary_problem.py\t       logical_or.data.validate.cvs    README.md\n","example_2.data.validate.cvs    logical_or.trained.machine.bin  run_machine.py\n","logical_or.configuration.yaml  output\t\t\t       train_machine.py\n","/content/drive/MyDrive/colab_wolfs_git_clones/lizard/first_neural_nets/binary_problem\n","Requirement already satisfied: reportlab in /usr/local/lib/python3.7/dist-packages (3.6.3)\n","Requirement already satisfied: pillow>=4.0.0 in /usr/local/lib/python3.7/dist-packages (from reportlab) (7.1.2)\n","Namespace(input_config_file='logical_or.configuration.yaml')\n","Input file name: logical_or.data.train.cvs\n","Raw training_set_inputs: ****************\n","[[0.04 0.03 0.1  0.02]\n"," [0.04 0.89 0.1  0.94]\n"," [0.97 0.98 0.3  0.97]\n"," [0.98 0.04 0.94 0.96]\n"," [0.09 0.93 0.95 0.98]]\n","training_set_inputs: ****************\n","[[0.04 0.03 0.1 ]\n"," [0.04 0.89 0.1 ]\n"," [0.97 0.98 0.3 ]\n"," [0.98 0.04 0.94]\n"," [0.09 0.93 0.95]]\n","training_set_outputs: ****************\n","[[0.02]\n"," [0.94]\n"," [0.97]\n"," [0.96]\n"," [0.98]]\n","\n","\n","\n","\n","weights holder:\n","[   array([999, 999, 999]),\n","    array([[0.03062876, 0.98963999, 0.2072533 ],\n","       [0.51650135, 0.52801049, 0.27590912],\n","       [0.14677987, 0.304295  , 0.10958706],\n","       [0.70709257, 0.88220762, 0.16446628]]),\n","    array([[0.04316685, 0.48914542, 0.67261529, 0.19722044]])]\n","\n","Value holder: \n","[array([999, 999, 999]), array([8.2, 8.2, 8.2, 8.2]), array([0.])]\n","\n","Normalized value holder:\n","[array([7.3, 7.3, 7.3]), array([9.1, 9.1, 9.1, 9.1]), array([1.])]\n","\n","Derivative value holder:\n","[array([999, 999, 999]), array([0., 0., 0., 0.]), array([1.])]\n","Output neuron error holder:\n","[array([4.6])]\n","\n","Output neuron out_minus_target error holder:\n","[array([3.7])]\n","\n","\n","\n","synaptic weights starting random values ****************: \n","\n","Weights holder:  [array([999, 999, 999]), array([[0.03062876, 0.98963999, 0.2072533 ],\n","       [0.51650135, 0.52801049, 0.27590912],\n","       [0.14677987, 0.304295  , 0.10958706],\n","       [0.70709257, 0.88220762, 0.16446628]]), array([[0.04316685, 0.48914542, 0.67261529, 0.19722044]])]\n","None \n","\n","synaptic weights after training ****************: \n","\n","Weights holder:  [array([999, 999, 999]), array([[-1.89300579, -3.00294163, -1.59150806],\n","       [ 1.51617316,  2.42434768,  1.30009427],\n","       [ 0.9419103 ,  1.68258887,  1.10991592],\n","       [ 1.64155824,  2.54362052,  1.18061147]]), array([[-14.31622987,   1.73858098,   0.42780385,   1.68994126]])]\n","None \n","\n","All matrixes **************** Start: \n","\n","\n","\n","\n","weights holder:\n","[   array([999, 999, 999]),\n","    array([[-1.89300579, -3.00294163, -1.59150806],\n","       [ 1.51617316,  2.42434768,  1.30009427],\n","       [ 0.9419103 ,  1.68258887,  1.10991592],\n","       [ 1.64155824,  2.54362052,  1.18061147]]),\n","    array([[-14.31622987,   1.73858098,   0.42780385,   1.68994126]])]\n","\n","Value holder: \n","[   array([999, 999, 999]),\n","    array([-4.47501224,  3.62618115,  2.7039955 ,  3.63488115]),\n","    array([3.57947519])]\n","\n","Normalized value holder:\n","[   array([0.09, 0.93, 0.95]),\n","    array([0.01126181, 0.97407249, 0.937262  , 0.97429131]),\n","    array([0.97286643])]\n","\n","Derivative value holder:\n","[array([999, 999, 999]), array([0.01113498, 0.02525527, 0.05880195, 0.02504776]), array([0.02639734])]\n","Output neuron error holder:\n","[2.5443891867679095e-05]\n","\n","Output neuron out_minus_target error holder:\n","[-0.007133567391940598]\n","\n","\n","\n","None\n","All matrixes **************** End:  \n","\n","Namespace(input_config_file='logical_or.configuration.yaml')\n","In calculate **************** \n","\n","neural_network descrition start ****************  \n","\n","Description: 'The initial test set uses binary data. The data set is for Supervised\n","    Learning, the machine should tune itself to find a specific pattern. The input\n","    values are supposed to represent the values zero and one, although a machine can\n","    be trained better with fuzzy values which are not a One or a zero.\n","\n","    Values which are close to \"0\" reprent a zero Values which are close to \"1\" represent\n","    a one.'\n","The data file format: input_1   input_2   input_3   output_1\n","machine_dump_file_name: logical_or.trained.machine.bin\n","training_data:\n","    number_of_hidden_layers: 1\n","    number_of_hidden_neurons: 4\n","    number_of_input_neurons: 3\n","    number_of_outputs_neurons: 1\n","    number_of_training_iterations: 100000\n","    training_data_file_name: logical_or.data.train.cvs\n","validation_data: logical_or.data.validate.cvs\n","\n","<nr_lib.nr_1_hidden_layer.NeuralNetwork object at 0x7ffa1c09bf90>\n","\n"," neural_network description end   ****************  \n","\n","test data: ****************\n","[[0.04 0.06 0.03]\n"," [0.2 0.12 1.2]\n"," [0.12 0.93 0.06]\n"," [0.1 1.08 0.96]\n"," [0.89 0.1 0.06]\n"," [1.03 0.08 1.1]\n"," [1.05 1.02 0.09]\n"," [1.03 0.95 0.91]]\n","Do calculaton with the trained network **************** \n","\n","Considering new situation [0.04 0.06 0.03] ->  [0.01944532]\n","Considering new situation [0.2 0.12 1.2] ->  [0.9221756]\n","Considering new situation [0.12 0.93 0.06] ->  [0.94984597]\n","Considering new situation [0.1 1.08 0.96] ->  [0.97530394]\n","Considering new situation [0.89 0.1 0.06] ->  [0.83755682]\n","Considering new situation [1.03 0.08 1.1] ->  [0.9680046]\n","Considering new situation [1.05 1.02 0.09] ->  [0.97603119]\n","Considering new situation [1.03 0.95 0.91] ->  [0.97804607]\n"]}],"source":["# run python code\n","import tensorflow as tf\n","import keras\n","\n","%cd \"/content/drive/MyDrive/colab_wolfs_git_clones/lizard\"\n","!ls \n","!pwd\n","\n","%cd \"first_neural_nets/binary_problem\"\n","!ls\n","!pwd\n","\n","!pip install reportlab\n","%run train_machine.py -i logical_or.configuration.yaml\n","%run run_machine.py -i logical_or.configuration.yaml\n"]}],"metadata":{"colab":{"collapsed_sections":[],"name":"binary_my_library","provenance":[{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1639750401434}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}